generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PUBLISHED_STATE {
  PUBLISHED
  ARCHIVED
  DRAFT
}

model Config {
  id              Int      @id @default(autoincrement())
  key             String   @unique @db.Char(12)
  data            Json
  created_at      DateTime @default(now()) @db.Timestamp(6)
  updated_at      DateTime @default(now()) @db.Timestamp(6)

  user            User? @relation(fields: [user_id], references: [id])
  user_id         Int?

  views           ConfigView[]

  published_state PUBLISHED_STATE @default(PUBLISHED)

  @@map("config")
}

model User {
  id      Int        @id @default(autoincrement())
  sub     String?    @unique @db.VarChar(64)
  name    String?    @db.VarChar(100)
  Config  Config[]   @relation()
  Palette Palette[]  @relation()

  @@map("users")
}

model ConfigView {
  id         Int      @id @default(autoincrement())
  viewed_at  DateTime @default(now()) @db.Timestamp(6)

  config     Config   @relation(fields: [config_key], references: [key])
  config_key String

  @@map("config_view")
}

model OldMigrations {
  id          Int       @id
  name        String    @unique @db.VarChar(100)
  hash        String    @db.VarChar(40)
  executed_at DateTime? @default(now()) @db.Timestamp(6)

  @@map("migrations")
}

enum PALETTE_TYPE {
  SEQUENTIAL
  DIVERGING
  CATEGORICAL
}

model Palette {
  paletteId  String       @id @default(uuid())
  name       String       @unique @db.VarChar(100)
  type       PALETTE_TYPE  
  colors     String[]
  created_at DateTime     @default(now()) @db.Timestamp(6)
  updated_at DateTime     @default(now()) @db.Timestamp(6)
  
  user       User?        @relation(fields: [user_id], references: [id])
  user_id    Int?

  @@map("palettes")
}